******************************************************************************

METODOS DE STRING:


charAt(int index) : da el caracter de la posicion ingresada.

equals(String str) : compara 2 cadenas, devuelve true o false.

equalsIgnoreCase(String str) : compara 2 cadenas ignorando grafia, devuelve true o false.

compareTo(String otraCadena) : compara 2 cadenas alfabeticamente, devuelve 0 si son iguales, entero negativo si la primera es menor y entero positivo si la primera es mayor.

concat(String str) : concatena dos cadenas.

contains(CharSequence s) : da true si la cadena tiene el caracter ingresado.

endsWith(String suffix) : da true si la cadena es igual al objeto ingresado.

indexOf(String str) : retorna el indice del valor encontrado a partir del parametro ingresado.

isEmpty() : retorna true si la longitud de cadena es 0.

length() : retorna longitud de cadena.

replace(char oldChar, char newChar) : remplaza valor del primer parametro por el segundo.

split(String regex) : retorna un arreglo de cadenas separados por el parametro ingresado.

startsWith(String prefix) : Retorna true si la cadena comienza con el parametro ingresado.

substring(int beginIndex) : retorna subcadena desde el parametro ingresado.

substring(int beginIndex, int beginIndex) : retorna subcadena desde el primer parametro hasta el segundo ingresados.

toCharArray() : retorna conjunto de caracteres de la cadena.

toLowerCase() : retorna cadena en minusculas.

toUpperCase() : retorna cadena de mayusculas.

String.valueOf(int) : convierte un numero a String.

Integer.parseInt(String) : convierte String a numero.

******************************************************************************

METODOS MATH:


abs(double a) : Da valor absoluto de un double.

abs(int a) : Da valor absoluto de un entero.

abs(long a) : Da valor absoluto de un long.

max(double a, double b) : Da mayor de dos double.

max(int a, int b) : Da mayor de dos int.

max(long a, long b) : Da mayor de dos long.

min(double a, double b) : Da menor de dos double.

min(int a, int b) : Da menor de dos int.

min(long a, long b) : Da menor de dos long.

pow(double a, double b) : Da valor del primer argumento elevado a potencia del segundo.

random() : Da double positivo, entre 0.0 y 1.0. Multiplicar * 10 (0 y 10), * 100(0,100).

round(double a) : Da long redondeado cercano al double.

sqrt(double a) : Da raiz cuadrada positiva.

floor(double a) : Da entero cercano por debajo.

********************************************************************************

METODOS ARRAY:

Arrays.equals(arreglo1, arreglo2) //Retorna true o false, si dos arreglos son iguales.

Arrays.fill(arreglo, variable) //inicializa todo el array con la variable.

Arrays.fill(arreglo, int desde, int  hasta, variable) //Inializa desde y hasta.

Arrays.sort(arreglo) //ordeba de manera ascendente.

Arrays.sort(arreglo, int desde, int hasta) // ordena asc desde y hasta.
    
Arrays.sort(arreglo, Comparator.reverseOrder()) //ordena descendente.Funciona con objetos: String, Integer, Object.

Arrays.toString(arreglo)//Retorna el arreglo en String. Ej: "[1,2,3]".

********************************************************************************

METODOS INT:

Integer(String s) //parsea string a int.

compareTo(entero, otroEntero) //Compara, retorna 0 -> iguales; -n -> primer numero es menor; n -> primer numero mayor.

doubleValue() //parsea int a double.

equals(Object obj) //Compara, retorna true si son iguales, y false si no.

parseInt(String s) //parsea string a int.

toString() //Retorna int en cadena.

********************************************************************************

METODOS DATE:

Date() //Retorna la fecha actual.

Date(int dia, int mes, int año) //Retorna la fecha ingresada sumando 1900 al año.
new Date(leer.nextInt()- 1900, leer.nextInt()+1, leer.nextInt());

after(Date fecha2) //Retorna true si la fecha esta despues de la fecha del parametro.

before(Date fecha2) //Retorna true si la fecha esta antes de la fecha del parametro.

compareTo(Date fecha) //Compara fechas, retorna 0 -> iguales; -n -> primer numero es menor; n -> primer numero mayor.

equals(Object obj) //Compara, true si son iguales, si no false.

getDay() //Retorna dia de la semana. Ej: 0 -> lunes, 1 -> martes, ..., 6 -> domingo.

getDate() //Retorna el numero del dia de la fecha.

getMonth() //Retorna el mes de la fecha.

getYear() //Retorna el año de la fecha.

getTime() //Retorna la fecha en milisegundos a partir del “epoch” (1970).

setDate(int dia) //Asigna un día a la fecha.

setMonth(int mes) //Asigna un mes a la fecha.

setYear(int anio) //Asigna un año a la fecha.

setTime(long time) //Asigna la fecha en milisegundos a partir del “epoch” (1970).

toString() //Retorna la fecha en una cadena de caracteres.

********************************************************************************
METODOS COLLECIONES:

***Metodos listas y conjuntos***
add(T) //agrega en listas y conjuntos.

remove(int indice) //elimina indice. Solo funciona en listas.

remove(elemento) //elimina primer elemento hallado. Funciona en conjuntos y listas.

get(int indice) //retorna elemento del indice.

set(int indice, elemento) //guarda elemento en el indice.

contains(elemento) //retorna true si esta el elemento, si no false.


***Metodos mapas***
put(llave, valor) //agrega en mapas.

remove(llave) //elimina el elemento con la llave. Solo funciona en mapas.

containsKey(llave) //retorna true si encuentra la llave, si no false.

containsValue(valor) //retorna true si encuentra el valor, si no false.

get(llave) //retorna elemento de la llave ingresada.

values() //retorna lista con todos los valores del mapa.


***Metodos general***
clear() //borra todos los elementos.

size() // retorna tamaño.

isEmpty() //retorna true si esta vacio, si no false.

iterator() //permite recorrer, acceder y eliminar algun elemento de la coleccion, lo ultimo en mapas no se puede.
ej.ArrayList<String> lista = new ArrayList();
Iterator it = lista.iterator(); //creamos iterator.
while(it.hasNext()){//hasNext devuelve true o false.
	if(it.next.equals("hola")){//next devuelve elemento.
		it.remove();//elimina elemento.
	}	
}


***Metodos Collections***

Collections.sort(coleccion) //ordena lista de manera asc. Conjuntos deben convertirse a listas y mapa hashMap a treeMap que se ordena solo.

Collections.fill(List<T> lista, Objet objeto) //reemplaza todos los elementos con un elemento.

Collections.frequency(Collection<T> coleccion, Object objeto) //retorna cantidad de veces que se encuentra.

Collections.replaceAll(List<T> lista, T valorViejo, T valorNuevo) //reemplaza todas las aparaciones del elemento viejo por el nuevo.

Collections.reverse(List<T> lista) //invierte orden.

Collections.reverseOrder() //retorna Comparator que invierte orden de los elementos de una coleccion.

Collections.shuffle(List<T> lista) //ordena lista aleatoria.

Collections.sort(List<T> lista) //ordena lista asc.


***Ordenar colecciones de objetos***
ej. ENTIDAD
public static Comparator<EP1_Libro> compararTitulo = new Comparator<EP1_Libro>() {
        @Override
        public int compare(EP1_Libro l1, EP1_Libro l2) {
            return l1.getTitulo().compareTo(l2.getTitulo());
	}
};	
. Main
ArrayList<EP1_Libro> libros = new ArrayList();
libros.sort(EP1_Libro.compararTitulo);
.HashSet y HashMap deben convertirse a ArrayList.
.TreeSet lo pasamos como parametro.
ej.TreeSet<EP1_Libro> libros = new TreeSet(EP1_Libro.compararTitulo);


********************************************************************************

METODOS IMPORTABLES UTILES:

Random rand= new Random() : declaramos el metodo.
int alea = rand.nextInt(10)+1 : nums randoms de 1 a 10, +1 xq empieza de 0.

JPasswordField pwd = new JPasswordField(); : declaramos el metodo.
JOptionPane.showConfirmDialog(null, pwd, "Enter Password",JOptionPane.OK_CANCEL_OPTION); : pwd permite ocultar lo que ingresa el usuario.
System.out.println(pwd.getPassword()); : con getPassword obtenemos lo ingresado, retorna char.
